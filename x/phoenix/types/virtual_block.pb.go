// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: phoenix/phoenix/virtual_block.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VirtualBlock struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time       int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Header     []byte `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Previous   []byte `protobuf:"bytes,4,opt,name=previous,proto3" json:"previous,omitempty"`
	Parent     []byte `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	LeftChild  []byte `protobuf:"bytes,6,opt,name=leftChild,proto3" json:"leftChild,omitempty"`
	RightChild []byte `protobuf:"bytes,7,opt,name=rightChild,proto3" json:"rightChild,omitempty"`
	VdfProof   []byte `protobuf:"bytes,8,opt,name=vdfProof,proto3" json:"vdfProof,omitempty"`
}

func (m *VirtualBlock) Reset()         { *m = VirtualBlock{} }
func (m *VirtualBlock) String() string { return proto.CompactTextString(m) }
func (*VirtualBlock) ProtoMessage()    {}
func (*VirtualBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_79cb14bfe5d87f6c, []int{0}
}
func (m *VirtualBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualBlock.Merge(m, src)
}
func (m *VirtualBlock) XXX_Size() int {
	return m.Size()
}
func (m *VirtualBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualBlock.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualBlock proto.InternalMessageInfo

func (m *VirtualBlock) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VirtualBlock) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *VirtualBlock) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *VirtualBlock) GetPrevious() []byte {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *VirtualBlock) GetParent() []byte {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *VirtualBlock) GetLeftChild() []byte {
	if m != nil {
		return m.LeftChild
	}
	return nil
}

func (m *VirtualBlock) GetRightChild() []byte {
	if m != nil {
		return m.RightChild
	}
	return nil
}

func (m *VirtualBlock) GetVdfProof() []byte {
	if m != nil {
		return m.VdfProof
	}
	return nil
}

func init() {
	proto.RegisterType((*VirtualBlock)(nil), "phoenix.phoenix.VirtualBlock")
}

func init() {
	proto.RegisterFile("phoenix/phoenix/virtual_block.proto", fileDescriptor_79cb14bfe5d87f6c)
}

var fileDescriptor_79cb14bfe5d87f6c = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0x87, 0x9b, 0x6e, 0xad, 0x6b, 0x58, 0x14, 0x72, 0x90, 0x20, 0x12, 0x8a, 0x5e, 0x0a, 0x62,
	0xf7, 0xe0, 0x1b, 0xac, 0x78, 0x97, 0x1e, 0x3c, 0x78, 0x91, 0x76, 0x9b, 0x36, 0xc1, 0xb6, 0x13,
	0xb2, 0x69, 0xd1, 0xb7, 0xf0, 0xb1, 0x3c, 0xee, 0x71, 0x8f, 0xd2, 0xbe, 0x88, 0x34, 0xed, 0xfe,
	0x39, 0xcd, 0x7c, 0xf3, 0xcd, 0x30, 0xf0, 0xc3, 0xf7, 0x4a, 0x00, 0xaf, 0xe5, 0xd7, 0x72, 0x5f,
	0x5b, 0xa9, 0x4d, 0x93, 0x94, 0x1f, 0x69, 0x09, 0xeb, 0xcf, 0x48, 0x69, 0x30, 0x40, 0xae, 0x26,
	0x19, 0x4d, 0xf5, 0x6e, 0x87, 0xf0, 0xe2, 0x6d, 0x5c, 0x5c, 0x0d, 0x7b, 0xe4, 0x12, 0xbb, 0x32,
	0xa3, 0x28, 0x40, 0xa1, 0x17, 0xbb, 0x32, 0x23, 0x04, 0x7b, 0x46, 0x56, 0x9c, 0xba, 0x01, 0x0a,
	0x67, 0xb1, 0xed, 0xc9, 0x35, 0xf6, 0x05, 0x4f, 0x32, 0xae, 0xe9, 0x2c, 0x40, 0xe1, 0x22, 0x9e,
	0x88, 0xdc, 0xe0, 0xb9, 0xd2, 0xbc, 0x95, 0xd0, 0x6c, 0xa8, 0x67, 0xcd, 0x81, 0x87, 0x1b, 0x95,
	0x68, 0x5e, 0x1b, 0x7a, 0x36, 0xde, 0x8c, 0x44, 0x6e, 0xf1, 0x45, 0xc9, 0x73, 0xf3, 0x2c, 0x64,
	0x99, 0x51, 0xdf, 0xaa, 0xe3, 0x80, 0x30, 0x8c, 0xb5, 0x2c, 0xc4, 0xa4, 0xcf, 0xad, 0x3e, 0x99,
	0x0c, 0x1f, 0xdb, 0x2c, 0x7f, 0xd5, 0x00, 0x39, 0x9d, 0x8f, 0x1f, 0xf7, 0xbc, 0x7a, 0xf9, 0xed,
	0x18, 0xda, 0x76, 0x0c, 0xfd, 0x75, 0x0c, 0xfd, 0xf4, 0xcc, 0xd9, 0xf6, 0xcc, 0xd9, 0xf5, 0xcc,
	0x79, 0x7f, 0x28, 0xa4, 0x11, 0x4d, 0x1a, 0xad, 0xa1, 0x5a, 0x16, 0xd0, 0x56, 0x8f, 0x35, 0x37,
	0x87, 0xd8, 0x8e, 0x01, 0x9a, 0x6f, 0xc5, 0x37, 0xa9, 0x6f, 0x93, 0x7b, 0xfa, 0x0f, 0x00, 0x00,
	0xff, 0xff, 0x87, 0xbd, 0x11, 0x80, 0x60, 0x01, 0x00, 0x00,
}

func (m *VirtualBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VdfProof) > 0 {
		i -= len(m.VdfProof)
		copy(dAtA[i:], m.VdfProof)
		i = encodeVarintVirtualBlock(dAtA, i, uint64(len(m.VdfProof)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RightChild) > 0 {
		i -= len(m.RightChild)
		copy(dAtA[i:], m.RightChild)
		i = encodeVarintVirtualBlock(dAtA, i, uint64(len(m.RightChild)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LeftChild) > 0 {
		i -= len(m.LeftChild)
		copy(dAtA[i:], m.LeftChild)
		i = encodeVarintVirtualBlock(dAtA, i, uint64(len(m.LeftChild)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintVirtualBlock(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Previous) > 0 {
		i -= len(m.Previous)
		copy(dAtA[i:], m.Previous)
		i = encodeVarintVirtualBlock(dAtA, i, uint64(len(m.Previous)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Header) > 0 {
		i -= len(m.Header)
		copy(dAtA[i:], m.Header)
		i = encodeVarintVirtualBlock(dAtA, i, uint64(len(m.Header)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Time != 0 {
		i = encodeVarintVirtualBlock(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintVirtualBlock(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVirtualBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovVirtualBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VirtualBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovVirtualBlock(uint64(m.Id))
	}
	if m.Time != 0 {
		n += 1 + sovVirtualBlock(uint64(m.Time))
	}
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovVirtualBlock(uint64(l))
	}
	l = len(m.Previous)
	if l > 0 {
		n += 1 + l + sovVirtualBlock(uint64(l))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovVirtualBlock(uint64(l))
	}
	l = len(m.LeftChild)
	if l > 0 {
		n += 1 + l + sovVirtualBlock(uint64(l))
	}
	l = len(m.RightChild)
	if l > 0 {
		n += 1 + l + sovVirtualBlock(uint64(l))
	}
	l = len(m.VdfProof)
	if l > 0 {
		n += 1 + l + sovVirtualBlock(uint64(l))
	}
	return n
}

func sovVirtualBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVirtualBlock(x uint64) (n int) {
	return sovVirtualBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VirtualBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVirtualBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = append(m.Header[:0], dAtA[iNdEx:postIndex]...)
			if m.Header == nil {
				m.Header = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Previous = append(m.Previous[:0], dAtA[iNdEx:postIndex]...)
			if m.Previous == nil {
				m.Previous = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = append(m.Parent[:0], dAtA[iNdEx:postIndex]...)
			if m.Parent == nil {
				m.Parent = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftChild", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftChild = append(m.LeftChild[:0], dAtA[iNdEx:postIndex]...)
			if m.LeftChild == nil {
				m.LeftChild = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightChild", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightChild = append(m.RightChild[:0], dAtA[iNdEx:postIndex]...)
			if m.RightChild == nil {
				m.RightChild = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VdfProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VdfProof = append(m.VdfProof[:0], dAtA[iNdEx:postIndex]...)
			if m.VdfProof == nil {
				m.VdfProof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVirtualBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVirtualBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVirtualBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVirtualBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVirtualBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVirtualBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVirtualBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVirtualBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVirtualBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVirtualBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVirtualBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVirtualBlock = fmt.Errorf("proto: unexpected end of group")
)
